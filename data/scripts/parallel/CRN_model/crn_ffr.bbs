/* Beatbox example bbs scripts CRNcell model using ffr.bbg
 *        
 */ 

// Some model parameters
def real ms 1.0;        /* The CRN model has time unit of 1 ms */
def real Cm 100.0; 	/* cell membrn capctnce, pF */

/* Simulation parameters */
/* ht is the constant time step used by the Euler device. */ 
def real ht  0.005;

/* HX is the uniform space step in all directions. Units are that used in your simulation. */ 
def real hx  0.1;

/* D is the diffusion coefficient. Units are that used in your simulation. */ 
def real D 0.05; 


// Dynamic variables and layer allocation
/* Allocation of layers to the state varables. */ 
def str u 0; 
def real umin -120; def real umax  80; def real umid -50;

/* Allocation of layers to the state varables. */ 
def str oi 14; 
def real oimin 0.0; def real oimax 1.0; def real oimid 0.5;

/* Allocation of layers to the state varables. */ 
def str f 5; 
def real fmin  0.0; def real fmax 1.0; def real fmid 0.5;

def int neqn 24;
/* Allocation of layers to the state varables. */ 
def str i 24; 


/* Declare global timing variables. In general: 
 * begin is for when the simulation begins, 
 * often, seldom, once, paceout are for output rates (see the k_func device), 
 * end is often used in the examples to set up the stopping criterion using stop device, 
 * stop is the variable used to indicate time for end of simulation not using the stop device. 
 */ 
def real begin;
def real often;
def real end;

def int dt 1000; 
def int tmax 100000; 

state
	geometry=ffr.bbg
	vmax=[i]+1
	normaliseVectors=1
	anisotropy=1
;

/* Assign values to the timing parameters using Beatbox functions for 
 * greater than (ge), less than (le), modulus (mod), etc. 
 */ 
k_func name=timing nowhere=1 pgm={
	begin = eq(t,0);
	often = eq(mod(t,dt),0);
	end   = ge(t,tmax);
};

// Initial conditions: twisted scroll 
def real y0 0.5*ymax+0.5; 
def real z0 0.5*zmax+0.5; 
def real lam 1000.0/hx;
def real Nwind 0.1;

k_func when=begin 
       name="ic" 
       file=pd_crn1.rec 
       pgm={
        phasep= atan2(y-y0,z-z0) - 2*pi*hypot(y-y0,z-z0)/lam + 2*pi*Nwind*x/xmax;
//        u[u]=p[u]; u[oi]=p[oi]
       };


// The computation
diff v0=[u] v1=[i] Dpar=D Dtrans=D/4 hx=hx;
euler v0=0 v1=neqn-1 ht=ht ode=crn par={ht=ht; Iu=@[i]};

// Create the directory for the image files
// (no problem if it is already there)
def str outdir [0].dir; // so it will be fhn_ffr_iso.dir
shell nowhere=1 when=never advance=1 cmd="mkdir [outdir]"; 
// advance=1 means this will be done BEFORE the first step

// With no graphics, this will just print to stdout, to show the progress
clock when=often;

ppmout when=often file="[outdir]/%04d.ppm" mode="w" 
  r=[u] r0=umin r1=umax // [u]-layer defines red component
  g=[oi] g0=oimin g1=oimax // [oi]-layer defines green component
  b=[f]  b0=fmin  b1=fmax;    // [f]-layer defines blue component


/* Stopping criterion. This is mandatory.*/ 
stop when=end;

end;
