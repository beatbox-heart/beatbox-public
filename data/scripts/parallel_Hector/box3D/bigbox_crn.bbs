/* Beatbox example bbs scripts for FHN, CRN, LRD cell to 3D simulations. 
 * This is distributed with the SVN repository. Use these bbs scripts to make your 
 * own as most of the devices are shown here. 
 * 
 * To run the bbs script sequentially at the command line (in a terminal), use: 
 *  Beatbox_SEQ name_of_bbs_script.bbs <input to bbs script> -verbose -profile 
 * 
 * This program simulates CRN 3D box. 
 *        
 */ 

/* Allocation of layers to the state varables. */ 
def str iext 24;

def int neqn [iext];

/* HX is the uniform space step in all directions. Units are that used in your simulation. */ 
def real hx 0.33;
/* ht is the constant time step used by the Euler device. */ 
def real ht  0.005;
def real Cm 100.0;
def real Period 20.0; // is sufficient for scaling run.
def int Nstim 1;
def real T;

def real Ampl 1200.0;
def real Duration 2.0;

// set up some output and stimulus parameters

/* Declare global timing variables. In general: 
 * begin is for when the simulation begins, 
 * often, seldom, once, paceout are for output rates (see the k_func device), 
 * end is often used in the examples to set up the stopping criterion using stop device, 
 * stop is the variable used to indicate time for end of simulation not using the stop device. 
 */ 
def real begin;
def real often;
def real every1ms;
def real every2ms;
def real every10ms;
def real seldom;
def real end;
def real dump_time;
def real stim;

/* D is the diffusion constant. Units are that used in your simulation. */ 
def real D 0.0735;

/* Allocation of layers to the state varables. */ 
def str V 0; def real Vmin -120; def real Vmax  80;def real Vmid -50;
/* Allocation of layers to the state varables. */ 
def str oi 14; def real oimin 0.0; def real oimax 1.0; def real oimid 0.5;
/* Allocation of layers to the state varables. */ 
def str f 5;   def real fmin  0.0;  def real fmax 1.0;  def real fmid 0.5;

// Schedule parameters
def long Tstart 1250.0;
def long dt 100;        // every given number of timesteps for frequent outputs
def long onems 1.0/ht;  // timesteps in one ms
def long twoms 2.0/ht;  // timesteps in two ms
def long tenms 10.0/ht; // timesteps in ten ms
def long DT (Period*Nstim)/ht;	// ctlpoint period
def long dumpdt Tstart/ht; // /* Dump all state variables from all nodes into a binary file for future use. */

/* The size of the model is xmax*ymax*zmax*vmax 
 * where vmax is the number of dynamical variables in the cell model of ODEs. 
 * xmax=1, ymax=1, zmax=1 represents a cell (OD) model, while 
 * all other values of xmax, ymax, zmax represent tissue models. 
 */ 
state xmax=235 ymax=269 zmax=298 vmax=[iext]+1;

/* Assign values to the timing parameters using Beatbox functions for 
 * greater than (ge), less than (le), modulus (mod), etc. 
 */ 
k_func name=timing ;when=always nowhere=1 pgm={
  T=t*ht;
  begin    =eq(t,0);
  often    =eq(mod(t,dt),0);
  every1ms =eq(mod(t,onems),0);
  every2ms =eq(mod(t,twoms),0);
  every10ms=eq(mod(t,tenms),0);
  seldom   =eq(mod(t,DT),0);
  end   =ge(T,(Period*Nstim));
  dump_time=eq(mod(t,dumpdt),0)*lt(T,(Tstart+10)); // because this needs happen once
  stim     =(lt(mod(T,Period),Duration)*lt(T,Period*Nstim))*Ampl/Cm;
};

def real signal;

// a location that I know to be close to the right place.
sample when=always x0=xmax-5 y0=ymax-5 z0=zmax-5 v0=[V] result=signal;

def real front; def real Tfront;

k_poincare nowhere=1 when=always sign=1 which=0 pgm={front=signal-Vmid; Tfront=T};

// The computation
/* Compute the Laplacian. */ 
diff v0=[V] v1=[iext] D=D hx=hx;
k_func when=stim x0=0 x1=xmax/2 y0=0 y1=ymax/2 pgm={u[iext]=u[iext]+stim;};
/* Computation of 1 time step update. 
 * In spatial simulations, the Laplacian is stored at Iu=@vmax. 
 */ 
euler v0=[V] v1=neqn-1 ht=ht ode=crn rest=0 par={
ht=ht;
IV=@[iext];
};

/* Stopping criterion. This is mandatory.*/ 
stop when=end;
end;

