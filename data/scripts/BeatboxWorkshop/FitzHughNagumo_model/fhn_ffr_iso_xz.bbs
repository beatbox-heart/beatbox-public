/* Beatbox example bbs script for Fitz-Hugh Nagumo 3D vortex simulations:
 * vortex initiated by phase distribution method, 
 * with the initial helix filament roughly along y axis,  
 * in realistic rabbit ventricles geometry ffr.bbg, 
 * with isotropic conduction.
 * 
 * Purpose of this script: Example bbs script for 3D FHN vortex simulation in a rabbit ventricles geometry.
 *
 * Inputs:  1. ffr.bbg (rabbit ventricles geometry)
            2. fhn1.rec      (file obtained by running fhn0.bbs)
 *
 * Outputs: png images of the 3D simulation (in the fhn_ffr_iso_xz.dir directory);
 *          
 *
 * This bbs script demonstrates the use of the following syntax and devices:
 * 1. more extensive use of k-variables to save typing and ease modification;
 * 2. use of k_func as a computational device for creating intial spiral conditions by phase distribution method, using data from file fhn1.rec obtained by the previous simulation of fhn1.bbs;
 * 3. use of shell output device to call arbitrary OS command from BeatBox (here to create an output directory for the image files);
 * 4. use of imgout output device to output image files;
 *
 * Before running this script, make sure that the geometry file ffr.bbg and fhn1.rec file are available in the work directory.
 *
 * To run this bbs script, use the following command:
 * Beatbox_SEQ fhn_ffr_iso_xz.bbs
 *
 */

//***************************
// Parameters
//FHN model kinetics parameters epsilon, beta, gamma
def real eps 0.30; def real bet 0.71; // rigid rotation, positive filament tension
//def real eps 0.20; def real bet 0.71;  // meander
//def real eps 0.3; def real bet 0.77; // negative filament tension
def real gam 0.50;

// defining layer order numbers for FHN model dynamic variables  
def str u 0; // u variable will be in layer 0
def str v 1; // v variable will be in layer 1
def str i 2; // diffusion term will be in layer 2

// graphics output limits 
def real umin -2.0; 
def real umax 2.0;
def real vmin -1.0; 
def real vmax 1.5;

// simulation time step 
def real ht  0.001;

// simulation space step
def real hx  0.1;

// diffusion coefficient
def real D   1.0;

// Device time (when) control variables
def real begin;
def real often;
def real end;

def int tmax 15000;  // max number of time steps  
def int tout 1.0/ht; // output will be in so many steps, i.e. once per 1.0 units of model time

state
	geometry=ffr.bbg
	vmax=[i]+1
;   // isotropic conduction by default

/* Assign values to the timing parameters using Beatbox functions for 
 * greater than (ge), less than (le), modulus (mod), etc. 
 */ 
k_func name=timing nowhere=1 pgm={
	begin = eq(t,0);            // beginning of simulation
	often = eq(mod(t,tout),0);  // time to make outputs every tout steps
	end   = ge(t,tmax);         // end of simulation
};


// Initial conditions: twisted scroll with the filament roughly along y coordinate axis
// turning 1D record at fhn1.rec into the initial 2D Arch. scroll
def real x0 0.5*ymax+0.5;  // x0 is roughly in the middle of x range
def real z0 0.5*zmax+0.5;  // z0 is roughly in the middle of z range
def real lam 100;          // The pitch of the Archimedean spiral measured in grid points
def real Nwind 0.1;        // the number of winds/twists of the helix in y direction
k_func when=begin 
       name="ic" 
       file=fhn1.rec 
       pgm={
        phasep= atan2(x-x0,z-z0) - 2*pi*hypot(x-x0,z-z0)/lam + 2*pi*Nwind*x/xmax;
        u[u]=p[u]; u[v]=p[v]
       };

// The diff device calculates the diffusion term of the field in layer [u]=0, that is u-field, 
// and puts the result into layer [i]. 
// The diff device also implicitly calsculates Neumann "no flux" boundary conditions.
// The diff device needs hx to compute the spatial derivatives, and diffusion coefficient D to multiply the result by.
diff v0=[u] v1=[i] D=D hx=hx;

// The 'reaction', that is cell kinetics update substep: the cell model 'ode' is 'fhncubpar';  
// the reserved Iu variable for the 'extra' term in the right-hand side for u is taken from the layer [i], 
// that is where the D*Laplacian for u was stored. 
euler v0=[u] v1=[v] ht=ht ode=fhncubpar rest=10000 par={epsu=eps epsv=eps bet=bet gam=gam Iu=@[i]};

// Create the directory for the image files
// (no problem if it is already there)
def str outdir [0].dir; // so it will be fhn_ffr_iso_xz.dir
shell nowhere=1 when=never advance=1 cmd="mkdir [outdir]"; 
// advance=1 means this will be done BEFORE the first step

// Image files for u,v,i fields.
// This is the simpler version which uses what is in the layers,
// only by linear scaling [umin,umax]->[0,255] etc. 
ppmout when=often file="[outdir]/%04d.ppm" mode="w" 
       r=[u] r0=umin r1=umax       // [u]-layer defines red component
       g=[v] g0=vmin g1=vmax       // [v]-layer defines green component
       b=[i] b0=0 b1=255;          // [i]-layer defibes blue component

/* Stopping criterion. This is mandatory.*/ 
stop when=end;

end;
