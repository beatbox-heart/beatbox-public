/* Beatbox example bbs script for Fitz-Hugh Nagumo 3D "cross field" simulations.
 * to illustrate the work of some useful devices and tricks. 
 * 
 * Purpose of this script: Example bbs script for 3D FHN simulation.
 *
 * Inputs: fhn.par
 *
 * Outputs:  ppm files (in fhn3.dir directory)
 *          
 *
 * This bbs script demonstrates the use of the following syntax and devices:
 * 1. more extensive use of k-variables to save typing and ease modification;
 * 2. use of k_func as a computational device for creating intial conditions by cross field stimulation method;
 * 3. use of shell output device to call arbitrary OS command from BeatBox (here to create an output directory for the image files);
 *
 * To run this bbs script, use the following command:
 * Beatbox_SEQ fhn3.bbs
 */

//***************************
// Parameters


// Include the file fhn.par with input parameters.
// In this way it is easy to ensure that the parameters are
// the same as e.g. in fhn1.bbs
<fhn.par>

// The size of the model is xmax*ymax*zmax*vmax.
// Define a box of size 100 (x) by 100 (y) by 50 (z). 
// The "accessible" spatial index x is from 1 to xmax-2, 
// where values x=0 and x=xmax-1 belong to the "halo"
// and are 'untouchable'. 
// We say that "acessible" x=1..nx, where nx=xmax-2, 
// and similarly for y and z. 
// Now vmax is the number of layers, including 
// the dynamical variables in the cell model plus any extra layers:
// in this particular case, layer [i] for diffusion term, i=2, see fhn.par  
// The dynamical variables layers are enumerated from zero, so the last layer available
// is [vmax-1].
state xmax=100 ymax=100 zmax=50 vmax=3;

// Time control (schedule) parameters.
def real begin;  // it is the very first step
def real out;    // it is time to make outputs
def real end;  // it is time to stop

def int tout 0.5/ht; // output will be in so many steps, i.e. once per 0.5 units of model time

// Assign values to the schedule parameters using k_func device.
k_func name=timing nowhere=1 pgm={
	begin = eq(t,0);
        out   = eq(mod(t,tout),0); // time to make outputs every tout steps
	end   = ge(t,40000); // end after 40000 time steps
};

// Cross field stimulus using k_func devices to initiate scroll wave along 
// z-axis.
k_func when=begin x1=25 pgm={u[u] = 1.7;};    // assign u= 1.7  for all x from x0=0  to x1=25
k_func when=begin x0=26 pgm={u[u] = -1.7;};   // assign u=-1.7  for all x from x0=26 to x1=xmax
k_func when=begin y1=25 pgm={u[v] = 0.7;};    // assign v= 0.7  for all y from y0=0  to y1=25
k_func when=begin y0=26 pgm={u[v] = -0.7;};   // assign v=-0.7  for all y from y0=26 to y1=ymax

// The diff device calculates the diffusion term of the field
// in layer [u]=0, that is u-field, and puts the result 
// into layer [i]. It also implicitly calsculates Neumann "no flux" boundary conditions.
// The diff device needs hx to compute the spatial 
// derivatives, and diffusion coefficient D to multiply the Laplacian by.
// both hx and D are defined in fhn.par 
diff v0=[u] v1=[i] D=D hx=hx;

// The 'reaction' substep: the cell model 'ode' is 'fhncubpar';  
// the reserved Iu variable for the 'extra' term in the right-hand side for u is taken from the layer [i], 
// that is the layer [i] where the Laplacian for u was stored. 
euler v0=[u] v1=[v] ht=ht ode=fhncubpar rest=10000 par={epsu=eps epsv=eps bet=bet gam=gam Iu=@[i]};

// Create the directory to store the image files into
// (no problem if it is already there)
def str outdir [0].dir; // so it will be fhn3.dir
shell nowhere=1 when=never advance=1 cmd="mkdir [outdir]"; 
// advance=1 means this will be done BEFORE the first step


/* PPMOUT gives 3D ppm file format output at a rate specified by when= parameter. 
   ppmout device produces serially numbered ppm files in the  sub-directory  [outdir]    */ 
ppmout  when=out file="[outdir]/%06d.ppm" mode="w" 
	r=[u] r0=umin r1=umax 
	g=[v] g0=vmin g1=vmax 
	b=[i] b0=0 b1=255;

/* Stopping criterion. This is mandatory.*/ 
stop when=end;
end;
