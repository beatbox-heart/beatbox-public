/* Beatbox example bbs script for Fitz-Hugh Nagumo 2D spiral wave simulations.
 * It is a slight elaboration on 'minimal.bbs'
 * to illustrate the work of some useful devices and tricks. 
 * 
 * Purpose of this script: Example bbs script for 2D FHN spiral wave simulation.
 *
 * Inputs: fhn1.rec (file obtained by running fhn0.bbs)
 *
 * Outputs: 1. onscreen graphics if used with graphics;
	    2. spiral wave trajectory in ASCII file fhn2.trj;
	    3. png images of frames of the 2D simulation;
 *          
 *
 * This bbs script demonstrates the use of the following syntax and devices:
 *
 * 1. More extensive use of k-variables to save typing and ease modification;
 * 2. Use of k_func as a computational device for creating intial conditions 
 *    by phase distribution method, using data from file fhn1.rec obtained 
 *    by the previous simulation of fhn1.bbs;
 * 3. Use of computational devices d_dt and grad2d to compute time derivative 
 *    and absolute value of spatial gradient of a field;
 * 4. Use of run-time graphics device k_paint to crudely visualize distribution
 *    of dynamic fields in the plane using 16-colour VGA palette;
 * 5. Use of singz device which detects spiral wave tips and is both 
 *    computational and output;
 * 6. Use of shell output device to call arbitrary OS command from BeatBox 
 *    (here to create an output directory for the image files);
 * 7. Use of imgout and k_imgout output devices to output image files;
 * 8. Use pause device for suspending execution and keeping the last picture 
 *    on the screen for a fixed time interval.
 * 9. Use of the d_dt device
 *
 * Before running this script, make sure that a correct fhn1.rec has been 
 * created by running fhn1.bbs.
 *
 * To run this bbs script with graphics, use the following command:
 *
 * Beatbox_SEQ fhn2.bbs
 *
 * and to run without graphics, use the following command:
 *
 * Beatbox_SEQ fhn2.bbs -nograph
 *
 */

//***************************
// Parameters


// Include the file fhn.par with input parameters.
// In this way it is easy to ensure that the parameters are
// the same as e.g. in fhn1.bbs
<fhn.par>    

// In this script we need some extra layers: 
def str p 3; // memory layer for computing time derivative 
def str d 4; // to store the time derivative 
def str g 5; // to store the spatial gradient

// The size of the model is xmax*ymax*zmax*vmax.
// The spatial index x from 1 to xmax-2, 
// where values x=0 and x=xmax-1 belong to halo
// and are 'untouchable'. 
// We say that x=1..nx, where nx=xmax-2, 
// and similarly for y. 
// Now vmax is the number of layers, including 
// dynamical variables in the cell model plus any extra layers,
// in our case [i] for diffusion term, [p] and [d]
// for time derivative and [g] for the spatial gradient. 
// They are enumerated from zero, so the last layer available
// is vmax-1.
def int nx 100; def int ny 100;
state xmax=nx+2 ymax=ny+2 zmax=1 vmax=[g]+1;

// Parameters of the initial conditions
def real x0 0.5*(nx+1); // x runs from 1 to nx so 0.5*(nx+1) is the centre
def real y0 0.5*(ny+1); // and so for y
def real lam 100; // The pitch of the Archimedean spiral measured in grid points

// Device control variables
def real begin;  // it is the very first step
def real out;    // it is time to make outputs
def real dtime;  // time to make outputs or a step preceding that
def real end;    // it is time to stop

def int tout 0.5/ht; // output will be in so many steps, i.e. once per 0.5 units of model time

//***************************
// Computations

k_func name=timing nowhere=1 pgm={ /* Define when to begin and end */
  begin = eq(t,0); // beginning of simulation
  out   = eq(mod(t,tout),0); // time to make outputs every tout steps
  dtime = out + eq(mod(t,tout),tout-1); // when to call d_dt device
  // NB '+' above works as logical 'or'
  end   = ge(t,50000); // end of simulation
};

// Initial conditions by phase distribution method
k_func when=begin  name=initial file=fhn1.rec pgm={
  phasep=atan2(x-x0,y-y0) - 2*pi*hypot(x-x0,y-y0)/lam; // phasep(x,y)=const is Arch. spiral
  u0=p0; u1=p1 // results of phase field calcs are assigned to appropriate layers. 
  // Here phaseu= magic variable could have been used instead making the 
  // last two assignments unnecessary. 
};

// This device calculates the diffusion term of the field
// in layer [u]=0, i.e. u-field, and puts the result 
// into layer [i]. It needs hx to compute the spatial 
// derivatives, and coefficient D to multiply the result by. 
diff v0=[u] v1=[i] D=D hx=hx;

// The reaction substep: [i] gives the extra term in the right-hand side for u. 
// We do not need the resting state here so drop the 'rest' parameter.
euler v0=[u] v1=[v] ht=ht ode=fhncubpar par={epsu=eps epsv=eps bet=bet gam=gam Iu=@[i]};

// This device calculates time derivative of the field in the [u] layer
// and puts the result into the [d] layer. 
// It uses layer [p] to remember previous values of the [u] layer,
// and requires the time discretization step to compute
// the time derivative. 
// We only use the results to output them, so no need to do this at every point .
// However device simply uses the immediately previous values of [u]
// so we call it when it needed AND at the step immediately before that.
// Naturally result in [d] is usable only after the second step. 
d_dt when=dtime v0=[u] v1=[p] vd=[d] ht=ht;

// This device calculates the absolute value of the spatial gradient 
// of field [u] and puts the result into layer [g]. 
// It needs the space step to calculate the gradient. 
// We only use the result for output. 
grad2d when=out v0=[u] v1=[g] hx=hx;

//***************************
// Output

// The graphics output window will have two 300x300 panels 
def int width 300; def int height 300;
// with 10 pixel rims and 20 pixels for timers
def int rim 10; def int timhgt 20;
// Hence the in-window coordinates of the first panel are
def int row0 rim+timhgt; def int row1 row0+height-1;
def int col0 rim;        def int col1 col0+width-1;
// The second panel takes the same rows but different columns
def int col2 col1+2*rim; def int col3 col2+width-1;

// The graphics window will be located 10 pixels from the right 
// and 10 pixels from the top of the screen. 
screen WINX=-10 WINY=10 XMAX=col3+rim YMAX=row1+rim;

// If the X11 graphics is switched off, then 
// these clock devices would still print time labels to the stdout,
// so the "if" clause at the front disables that. 
if Graph clock   when=out color=WHITE row0=1 col0=1; // this shows the integer step counter 
if Graph k_clock when=out color=WHITE row0=1 col0=21 code=t*ht format="T=%4.1f a.u."; // this shows real model time
// the row, col coords of these are in characters, not pixels

// Run-time graphics to paint the field using VGA colour palette
k_paint when=out nabs=nx nord=ny          // how many abscissa and ordinate values
  col0=col0 col1=col1 row0=row0 row1=row1 // output it into the left panel
  color=WHITE*16+WHITE                    // white borders for the panel
  pgm={                                   // program should calculate colour for given (abs,ord)
                                          // and we take abs=x and ord=y
  col=ifge0(u(abs,ord,0,[u]),LIGHTRED,0)  // red component there if u field is above 0
  + ifge0(u(abs,ord,0,[v]),GREEN,0)};     // and green if [v] field is above 0
// NB: lightred+green=yellow, and absence of both is black. 

// Detect the tip of the spiral
singz when=out
  v0=[u] c0=0         // trace intersection of
  v1=[v] c1=0         // u(x,y,t)=0 and v(x,y,t)=0
  col0=col2 col1=col3 // plot it 
  row0=row0 row1=row1 // in the right panel
  color=WHITE*16+LIGHTRED // red trace with white head
  file=[0].trj        // and write into file fhn2.trj
;
// Flush the on-screen graphics
update when=out;

// Create the directory for the image files
// (no problem if it is already there)
def str outdir [0].dir; // so it will be fhn2.dir
shell nowhere=1 when=never advance=1 cmd="mkdir [outdir]"; 
// advance=1 means this will be done BEFORE the first step

// Image files for u,v,i fields.
// This is the simpler version which uses what is in the layers,
// only by linear scaling [umin,umax]->[0,255] etc. 
imgout when=out 
  // On-the-fly conversion including flipping top/bottom flip
  filter="pnmflip -tb | pnmtopng > [outdir]/uvi%07.0f.png"
  r=[u]  r0=umin  r1=umax // [u]-layer defines red component
  g=[v]  g0=vmin  g1=vmax // [v]-layer defines green component
  b=[i]  b0=-1    b1=1;  // [i]-layer defines blue component 

// This is more sophisticated version, here we want to output
// a function (the absolute value) of one othe layers. 
k_imgout when=out
  filter="pnmflip -tb | pnmtopng > [outdir]/udg%06.0f.png"
  filtercode="t/tout"	// fancy numerating files sequentially rather than by timesteps
  width=nx height=ny	// i=0..width-1, j=0..height-1
  pgm={			// this program should calculate r,g,b as real numbers in [0,1]
    r=(u(1+i,1+j,0,[u])-umin)/(umax-umin); // as before
    g=fabs(u(1+i,1+j,0,[d]))/2.0; // abs value in [d] layer expected to be [0..1] otherwise cropped
    b=u(1+i,1+j,0,[g])/2.0; // value in [g] layer is nonnegative anyway
  };

// Keep the picture on the screen for 3 seconds in the end
if Graph pause when=end seconds=3;

/* Stopping criterion. This is mandatory.*/ 
stop when=end;
end;
