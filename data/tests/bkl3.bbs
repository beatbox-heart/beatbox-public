// Test script for dump/load sequential vs parallel: the fist part
def str halffile [1];
def str fullfile [2];

def real hx 0.2;
def int nx 40;
def int ny 40;
def int nz 16;
def real Lx nx*hx;
def real Ly ny*hx;
def real Lz nz*hx;

def real difflimit  hx*hx/6.0;
def real ht 0.5*difflimit;
def real Tmax 1.0; 

def str u 0; 
def str v 1; 
def str iu 2; 
def str iv 3; 
state xmax=nx+2 ymax=ny+2 zmax=nz+2 vmax=[iv]+1;

def real apar   1.1;
def real bpar   0.19;
def real epspar 1.0/50.0;
def real Du     1.00;
def real Dv     0.10;

def int t2 (0.5*Tmax)/ht; // dump period
def real begin;
def real halfway;
def real fullway;
k_func nowhere=1 name=schedule pgm={
  begin =eq(t,0);
  halfway=eq(t,t2);
  fullway=ge(t,2*t2);
};
def real x0 0.5*nx+0.5; 
def real y0 0.5*ny+0.5; 
def real lam 80;
def real Nwind 0.5;
k_func when=begin 
       name="ic" 
       file="bkl1.rec" 
       pgm={
        phasep= atan2(x-x0,y-y0) - 2*pi*hypot(x-x0,y-y0)/lam + 2*pi*Nwind*z/nz;
        u[u]=p[u]; u[v]=p[v]
       };
diff v0=[u] v1=[iu] D=Du hx=hx;
diff v0=[v] v1=[iv] D=Dv hx=hx;
euler name=ode1 
      v0=[u] 
      v1=[v] 
      ht=ht 
      ode=fhnbkl 
      par={
         a=apar 
         b=bpar 
         eps=epspar 
         Iu=@[iu] 
         Iv=@[iv]
      };
dump when=halfway file=[halffile] v0=[u] v1=[v];
dump when=fullway file=[fullfile] v0=[u] v1=[v];

stop when=fullway;

end;
