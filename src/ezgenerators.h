/**
 * Copyright (C) (2010-2018) Vadim Biktashev, Irina Biktasheva et al. 
 * (see ../AUTHORS for the full list of contributors)
 *
 * This file is part of Beatbox.
 *
 * Beatbox is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Beatbox is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Beatbox.  If not, see <http://www.gnu.org/licenses/>.
 */

/* ------------------------------------------------------------------------- 
 *     Here starts the initialization part of the code in which the lookup
 *                           tables are generated. 
 *		     
 * ------------------------------------------------------------------------- */

/* The main lookup table is the marching cubes lookup table called triangle
 * table. Each of the 8 vertices of a marching cube are assigned either a 0
 * or 1 depending on whether they are above or below the contour value. Given
 * this marching cubes index, it holds the instructions on how to draw the
 * contour through cube using at most 5 triangles.
 * 
 * There are 21 topologically distinct ways you can triangulate a cube. These
 * are listed below together with the index to which they correspond. By
 * rotating such cubes through all 24 orientations we can generate all the
 * entries in the lookup table.
 *
 * For indexes with 4 vertices high and 4 vertices low, rotating the cube
 * will eventually generate the entry for the complement of the original
 * index.  The triangle list so generated could well be topologically
 * different to the original triangle list. The 1987 paper used topologically
 * identical triangulations for complimentary cases. This has since found to
 * produce 'holes' in certain cases and so Montani, Scateni and Scopigno
 * (1994) devised 6 modified triangulation for complimentary cases. 3 of
 * these have 4 vertices high and 4 low and fortunately these are precisely
 * the cases which are topologically different when rotated to their
 * complimentary index.  The other 3 are new triangulations but do not have 4
 * vertices high and 4 vertices low so rotating these does not cause any
 * problems.
 * ------------------------------------------------------------------------- */

CubeEdge table_generators[NUM_GENERATORS][MAX_TRIANGLE_LIST_LENGTH+1] =

/* The "+1" is for the first element - the index of the generator which is
 * used later to build the whole table. */

{

/* Unambiguous cases which have less than 4 vertices high. Rotating one of
 * these does not generate the complimentary case so we list them
 * explicitly. */

  {1,  1,4,9,END},                /*  case 1  */
  {254,1,4,9,END},                /*  case 1 compliment  */
  {3,  10,9,2,9,2,4,END},         /*  case 2  */
  {252,10,9,2,9,2,4,END},         /*  case 2 compliment  */
  {65, 1,4,9,7,12,6,END},         /*  case 4  */
  {190,1,4,9,7,12,6,END},         /*  case 4 compliment  */
  {50, 6,8,2,8,2,9,2,9,1,END},    /*  case 5  */
  {205,6,8,2,8,2,9,2,9,1,END},    /*  case 5 compliment  */

/* Unambiguous cases which have exactly 4 vertices high. The compliments will
 * be generated by the rotations. Note that the exact of order of the
 * triangle vertices for the complement will not be the same (because we
 * obtain them by rotational symmetry not complimentary symmetry) but the
 * triangle edges on each face are the same. */

  {51, 2,4,6,4,6,8,END},                 /*  case 8  */
  {78, 11,4,7,4,7,1,7,1,6,1,6,10,END},   /*  case 9  */
  {113,7,8,12,8,12,1,12,1,10,8,1,4,END}, /*  case 11 */
  {77, 2,1,6,1,6,11,6,11,7,1,11,9,END},  /*  case 14 */

/* Ambiguous cases with less than 4 vertices high and have different
 * compliments according to "A modified look-up table for implicit
 * disambiguation of Marching Cubes" by Montani, Scateni, Scopigno; Visual
 * Computer 1994 (10).  */

  {5,  1,4,9,3,2,12,END},                       /*  case 3   */
  {250,4,9,3,9,3,12,12,9,2,9,2,1,END},          /*  case 3 compliment  */
  {67, 10,9,2,9,2,4,7,12,6,END},                /*  case 6   */
  {188,10,9,6,9,6,4,6,4,7,4,7,12,12,4,2,END},   /*  case 6 compliment  */
  {74, 1,10,2,4,3,11,7,12,6,END},               /*  case 7   */
  {181,11,4,7,4,7,1,7,1,6,1,6,10,3,2,12,END},   /*  case 7 compliment  */

/* Ambiguous cases with exactly 4 vertices high. Compliments will be
 * generated by rotation which agree with the 1994 paper. And it is important
 * in these cases that the inverse of the index is topologically different.
 * */

  {105,11,9,3,9,3,1,7,5,12,5,12,10,END},        /*  case 10  */
  {58, 6,8,2,8,2,9,2,9,1,11,3,4,END},           /*  case 12  */
  {90, 4,1,9,11,7,8,2,3,12,5,6,10,END},         /*  case 13  */
};

/* Side note
 *
 * We have experimented using GL_TRIANGLE_STRIP in order to simplify the list
 * of triangles and reduce the number of vertices needed to pass to OpenGL
 * (and thus reduce the number of transformations required). However, in
 * order to do this, you need more glBegin and glEnds in order to keep
 * changing primitives. We believe that it is easier all round to provide
 * OpenGL with just GL_TRIANGLES. It is also very convenient because it also
 * makes finding surface intersection easier; everything is a triangle!  */

/* ------------------------------------------------------------------------- */
